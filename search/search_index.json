{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C17hawke-YouTube This Documentation is for my YouTube Channel c17hawke . It will contain all the resource (source code, slides, notes etc) in this website. Content Topic SubTopic Video: 01 Decorators Video: 02 Python good practices | Prevent unwanted bugs _","title":"Home"},{"location":"#c17hawke-youtube","text":"This Documentation is for my YouTube Channel c17hawke . It will contain all the resource (source code, slides, notes etc) in this website.","title":"C17hawke-YouTube"},{"location":"#content","text":"Topic SubTopic Video: 01 Decorators Video: 02 Python good practices | Prevent unwanted bugs _","title":"Content"},{"location":"decorators/","text":"Decorators Github Repo","title":"Decorators"},{"location":"decorators/#decorators","text":"","title":"Decorators"},{"location":"decorators/#github-repo","text":"","title":"Github Repo"},{"location":"ensure/","text":"Python good practices | Prevent unwanted bugs installation To install ensure run the following command: pip install ensure Code used in the demo Code part 01 used in the video demo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def is_product_is_positive ( x : int , y : int ) -> bool : if isinstance ( x , int ) and isinstance ( y , int ): if x * y >= 0 : return True return False else : raise TypeError ( \"x and y must be integers\" ) result = is_product_is_positive ( x = 2 , y = 2 ) print ( f \"Case1: { result } \" ) result = is_product_is_positive ( x = 2 , y = 22.2 ) print ( f \"Case2: { result } \" ) result = is_product_is_positive ( x = 2 , y = \"test\" ) print ( f \"Case2: { result } \" ) Code part 02 used in the video demo_ensure.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from ensure import ensure_annotations @ensure_annotations def is_product_is_positive ( x : int , y : int ) -> bool : if x * y >= 0 : return True return False # result = is_product_is_positive(x=2, y=2) # print(f\"Case1: {result}\") # result = is_product_is_positive(x=2, y=22) # print(f\"Case2: {result}\") # result = is_product_is_positive(x=2, y=\"test\") # print(f\"Case2: {result}\") @ensure_annotations def get_product ( x : int , y : int ) -> int : return \"x*y\" result = get_product ( x = 2 , y = 22 ) print ( f \"Case1: { result } \" )","title":"Ensure"},{"location":"ensure/#python-good-practices-prevent-unwanted-bugs","text":"installation To install ensure run the following command: pip install ensure","title":"Python good practices | Prevent unwanted bugs"},{"location":"ensure/#code-used-in-the-demo","text":"Code part 01 used in the video demo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def is_product_is_positive ( x : int , y : int ) -> bool : if isinstance ( x , int ) and isinstance ( y , int ): if x * y >= 0 : return True return False else : raise TypeError ( \"x and y must be integers\" ) result = is_product_is_positive ( x = 2 , y = 2 ) print ( f \"Case1: { result } \" ) result = is_product_is_positive ( x = 2 , y = 22.2 ) print ( f \"Case2: { result } \" ) result = is_product_is_positive ( x = 2 , y = \"test\" ) print ( f \"Case2: { result } \" ) Code part 02 used in the video demo_ensure.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from ensure import ensure_annotations @ensure_annotations def is_product_is_positive ( x : int , y : int ) -> bool : if x * y >= 0 : return True return False # result = is_product_is_positive(x=2, y=2) # print(f\"Case1: {result}\") # result = is_product_is_positive(x=2, y=22) # print(f\"Case2: {result}\") # result = is_product_is_positive(x=2, y=\"test\") # print(f\"Case2: {result}\") @ensure_annotations def get_product ( x : int , y : int ) -> int : return \"x*y\" result = get_product ( x = 2 , y = 22 ) print ( f \"Case1: { result } \" )","title":"Code used in the demo"},{"location":"feedback/","text":"","title":"Feedback"}]}